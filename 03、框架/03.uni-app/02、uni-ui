知识点：uni-ui

文档：https://uniapp.dcloud.io/component/uniui/uni-ui

说明：如果要修改样式，请直接到 uni_modules 目录中找到对应的组件进行修改

icon 图标
  文档：https://uniapp.dcloud.io/component/uniui/uni-icons
  预览：https://hellouniapp.dcloud.net.cn/pages/extUI/icons/icons

  使用步骤：
    （1）使用组件
      <uni-icons type="contact" size="30"></uni-icons>

uni-search-bar 搜索栏
  文档：https://uniapp.dcloud.io/component/uniui/uni-search-bar?id=%e5%9f%ba%e6%9c%ac%e7%94%a8%e6%b3%95
  预览：https://hellouniapp.dcloud.net.cn/pages/extUI/search-bar/search-bar

  使用步骤
    属性说明：
      placeholder：不对焦时的默认文本

      :radius="100"：设置圆角

      cancelButton：是否显示取消按钮
        - auto：输入框不为空时显示
        - always：一直显示
        - none：一直不显示

      @input：输入事件。输入是触发
        - 参数一：用户输入的内容

    （1）导入结构
      <uni-search-bar placeholder="请输入搜索内容" :radius="100" cancelButton="none" @input="input">请输入搜索内容</uni-search-bar>

  吸顶效果
    （1）使用 view 包裹搜索组件
      <view class="search-box">
        <my-search @click="gotoSearch"></my-search>
      </view>

    （2）设置样式
      .search-box {
        position: sticky;
        top: 0;
        z-index: 999;
      }

  自动对焦（只在真机上有效）
    （1）将 show、showSync 改为 true（-- uni-search-bar.vue）
      data() {
        return {
          show: true,
          showSync: true
        }
      }
  
  防抖
    说明：每次输入内容都要发送请求，这要很浪费性能。
    解决方法：使用延时器。在 500 毫秒内输入内容，则不会发送请求

    使用步骤：
      （1）定义数据
        // 延时器的 timerId
        timer: null,
        // 搜索关键词
        kw: ''

      （2）添加延时器
        // 输入事件
        input(e) {
          // 清除延时器
          clearTimeout(this.timer)

          // 500 毫秒内没有触发新的输入事件，则发送请求
          this.timer = setTimeout(() => {
            this.kw = e
            console.log(this.kw)
          }, 500)
        }

  搜索建议
    api 工厂没有提供该接口，所以无法完成该功能。详情请看 https://www.bilibili.com/video/BV1834y1676P?p=118

  搜索历史【！！！因为 api 工厂需要 token 才可以获取搜索历史，所以这个功能等完成登录功能后再补上】
    （1）导入结构
      <!-- 搜索历史 -->
      <view class="history-box">
        <!-- 标题区域 -->
        <view class="history-title">
          <text>搜索历史</text>
          <uni-icons type="trash" size="17"></uni-icons>
        </view>
        <!-- 列表区域 -->
        <view class="history-list">
          <uni-tag :text="item" v-for="(item, i) in historyList" :key="i"></uni-tag>
        </view>
      </view>

    （2）定义搜索历史列表
      // 搜索历史列表数据
      historyList: []

GoodsNav 商品导航
  文档：https://uniapp.dcloud.io/component/uniui/uni-goods-nav
  预览：https://hellouniapp.dcloud.net.cn/pages/extUI/goods-nav/goods-nav

  使用步骤：
    （1）导入结构
      <!-- 商品导航组件 -->
      <view class="goods_nav">
        <!-- fill 控制右侧按钮的样式：（true：圆形）（false：方形） -->
        <!-- options 左侧按钮的配置项 -->
        <!-- buttonGroup 右侧按钮的配置项 -->
        <!-- click 左侧两个按钮的点击事件处理函数 -->
        <!-- buttonClick 右侧两个按钮的点击事件处理函数 -->
        <uni-goods-nav :fill="true" :options="options" :buttonGroup="buttonGroup" @click="onClick" @buttonClick="buttonClick" />
      </view>

    （2）导入 data 数据
      // 左侧按钮组的配置对象
      options: [{
        icon: 'shop',
        text: '店铺'
      }, {
        icon: 'cart',
        text: '购物车',
        info: 2
      }],
      // 右侧按钮组的配置对象
      buttonGroup: [{
        text: '加入购物车',
        backgroundColor: '#ff0000',
        color: '#fff'
      },
      {
        text: '立即购买',
        backgroundColor: '#ffa200',
        color: '#fff'
      }]

    （3）导入样式
      .goods_nav {
        position: fixed;
        bottom: 0;
        left: 0;
        width: 100%;
      }

      -- 解决页面最底部被商品导航组件遮住的问题
      .最外层元素 {
        padding-bottom: 50rpx;
      }

    （4）点击购车车跳转到购物车页
      // 左侧两个按钮的点击事件
      onClick( e ) {
        // 通过 e.content.text 来判断点击的是哪个按钮
        if ( e.content.text === '购物车' ) {
          // 切换到购物车页面
          uni.switchTab( {
            url: '/pages/cart/cart'
          } )
        } else if ( e.content.text === '店铺' ) {
          // 切换到店铺
          uni.switchTab( {
            url: '/pages/home/home'
          } )
        }
      }

uni-number-box 带加减按钮的数字输入框
  文档：https://uniapp.dcloud.io/component/uniui/uni-number-box
  预览：https://hellouniapp.dcloud.net.cn/pages/extUI/number-box/number-box

  属性说明：
    mix：最小数量
    max：最大数量
    value：默认数量
  
  事件说明：
    @change：输入框的值发送变化时触发（参数一：输入框当前 value）

  使用步骤：
    （1）导入结构
      <uni-number-box :min="1" :value="goods.count"></uni-number-box>

  数据持久化。将 数量 更新到 vuex 中
    当值发送变化时，将最新的数量传递给外界
      （1）为 <uni-number-box> 所在的组件绑定 @num-change 事件，从而获取当前商品的 id 和 count（-- pages/cart.vue）
        <my-goods @num-change="numberChangeHandler"></my-goods>

      （2）定义 @num-chang 的事件处理函数（-- 同上）
        // 获取 my-goods 组件传递过来的 id、count
        numberChangeHandler(e) {
          console.log(e)
        }

      （3）为 <uni-number-box> 绑定 @change 事件（-- components/my-goods.vue）
        <uni-number-box @change="numChangeHandler"></uni-number-box>

      （4）定义 @change 的事件处理函数（-- 同上）
        // 商品数量发送变化时触发
        numChangeHandler(val) {
          this.$emit('num-change', {
            // 商品的 Id
            goods_id: this.goods.goods_id,
            // 商品的最新数量
            goods_count: +val
          })
        }

    将数量更新到 vuex 中
      （1）定义  mutations 方法（-- store.cart.js）
        // 更新购物车中商品的数量
        updateGoodsCount(state, goods) {
          // 根据 id 查询购物车中对应商品的信息对象
          const findResult = state.cart.find(x => x.id === goods.id)

          if(findResult) {
            // 更新对应商品的数量
            findResult.count = goods.count
            // 持久化存储到本地
            this.commit('m_cart/saveToStorage')
          }
        }

      （2）将 vuex 模块中的方法映射到当前组件的 methods 中（-- pages/cart.vue）
        ...mapMutations('m_cart', ['updateGoodsCount']),

      （3）商品勾选状态发生了变化时，调用 updateGoodsCount 方法（-- 同上）
        numberChangeHandler(e) {
          -- 增
            this.updateGoodsCount(e)
          --
        },


  【问题】解决当用户在 NumberBox 中输入字母等非法字符之后，会导致 NumberBox 数据紊乱的问题
    如：在输入框中输入 a，count 的值为 NaN

    （1）对用户输入的 非法字符 进行处理（-- uni_modules/components/uni-number-box.vue）
      _onBlur (event) {

        -- 改（旧）
          let value = event.detail.value;
        --
        -- 改（新）
          // 将用户输入的 小数 转化为 整数
          let value = parseInt(event.detail.value)

          // 将用户输入的 非法字符 转化为 默认值1
          if (!value) {
            this.inputValue = 1;
            return;
          }
        --

      }

uni-swipe-action 滑动删除
  使用步骤：
    （1）导入结构（-- pages/cart.vue）
        <uni-swipe-action>
          <uni-swipe-action-item :right-options="options" @click="swipeActionClickHandler(item)"></uni-swipe-action-item>
        </uni-swipe-action>

        -- 改（旧）
          <block v-for="(item, i) in cart" :key="i">
            <my-goods :goods="item" :show-radio="true" :show-number-box="true"  @radio-change="radioChangeHandler" @num-change="numberChangeHandler"></my-goods>
          </block>
        --
        -- 改（新）
          <uni-swipe-action>
            <block v-for="(item, i) in cart" :key="i">
              <uni-swipe-action-item :right-options="options" @click="swipeActionClickHandler(item)">
                <my-goods :goods="item" :show-radio="true" :show-number-box="true"  @radio-change="radioChangeHandler" @num-change="numberChangeHandler"></my-goods>
              </uni-swipe-action-item>
            </block>
          </uni-swipe-action>
        --

      （2）定义 <uni-swipe-action> 组件的配置项（-- 同上）
        options: [{
          // 文本内容
          text: '删除',
          style: {
            backgroundColor: '#C00000' // 按钮的背景颜色
          }
        }]

      （3）定义 @click 的事件处理函数（-- 同上）
        // 点击 uni-swipe-action 组件时触发
        swipeActionClickHandler(goods) {
          console.log(goods)
        }

      （4）定义 mutations 方法（-- store/cart.js）
        // 根据 Id 从购物车中删除对应的商品信息
        removeGoodsById(state, goods) {
          // 调用数组的 filter 方法进行过滤。使用当前 商品id 和传递过来的 商品id 进行比较，如果不相等则将传递过来的 商品id 存储到当前 商品id 中
          state.cart = state.cart.filter(x => x.id !== id)
          // 持久化存储到本地
          this.commit('m_cart/saveToStorage')
        }

      （5）将 vuex 模块中的方法映射到当前组件的 methods 中（-- pages/cart.vue）
        ...mapMutations('m_cart', ['removeGoodsById']),
      
      （6）调用 removeGoodsById 方法（-- 同上）
        // 点击了滑动操作按钮
        swipeActionClickHandler(goods) {

          -- 增
            this.removeGoodsById(goods.id)
          --

        }



















































