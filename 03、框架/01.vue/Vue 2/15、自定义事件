知识点：自定义事件

作用：让组件的使用者可以监听到组件内状态的变化

需求：当 count 的值发送变化时，触发自定义事件，把最新的值发送给组件的使用者

特性：可以通过自定义事件的第二个参数向外 传参

使用步骤：

  封装 组件阶段：
    （1）声明 自定义事件
    （2）触发 自定义事件

  使用 组件阶段
    （3）监听 自定义事件

-- App.vue

  <template>
    <div>
      <h1>app 根组件</h1>
      <hr />

      // （3）监听 自定义事件
      <my-counter @countChange="getCount"></my-counter>

    </div>
  </template>

  <script>
  import MyCounter from './Counter.vue'

  export default {
    name: 'MyApp',
    methods: {
      getCount(val) {
        console.log('触发了 countChange 自定义事件', val)
      },
    },
    components: {
      MyCounter,
    },
  }
  </script>

-- Counter.vue

  <template>
    <div>
      <p>count 的值是：{{ count }}</p>
      <button @click="add">+1</button>
    </div>
  </template>

  <script>
  export default {
    name: 'MyCounter',

    // （1）声明 自定义事件
    emits: ['countChange'],

    data() {
      return {
        count: 0,
      }
    },
    methods: {
      add() {
        this.count++

        // （2）触发 自定义事件
        this.$emit('countChange', this.count)

      },
    },
  }
  </script>