知识点：Git 介绍

下载地址：https://git-scm.com/downloads

查看 git 存放目录：which -a git

删除：
    1、cd 到 git 存放目录
    2、删除 git：bin rm -rf git*
        - rm：删除
        - -rf：强力删除
报错：Operation not permitted（没有权限删除）
解：查看 git 版本后面是否携带 (Apple Git-xxx)，如果携带，说明这是 mac 电脑预安装的 git 无法删除
    - 查看版本：bin ./git --version

作用：
    1、对项目进行版本管理（版本管理工具）
    2、记录项目版本的变化，方便将来 查阅 或 恢复 特定版本
    3、当用 旧版本 覆盖 新版本 时会发出警告

解决：
    1、项目数量多时，命名不清晰导致文档版本混乱
    2、每次编辑项目都需要复制粘贴
    3、多人同时编辑一个项目，容易产生覆盖

使用场景：
    1、在开发新功能前，可以先保存一下当前项目状态，如果功能在开发中出现问题，可以很方便的恢复到开发前的项目状态

原则：每次提交暂存区的文件到 本地仓库中时，只提交一个功能

本地仓库：用于存放项目状态；git 仓库又被叫做本地仓库

工作目录：被 Git 管理的项目目录

暂存区：每一次存储项目的状态，并不是保存项目中的所有文件，而是只保存被修改过的文件
    特性：
        1、减少冗余文件
        2、减少保存项目状态的时间

配置 GIT：
    特性：该配置项只需要配置一次，后续使用可以不用配置

    git config --global user.name 提交人姓名
    git config --global user.email 提交人邮箱

    git config --list：查看 Git 配置信息

其它命令：
    git --version：                                查看 Git 版本
    git clone 远程仓库地址：                         克隆远程仓库到本地仓库
    git config --global credential.helper store：  记住账号密码（这样每次推送仓库就不需要输入账号密码了）
    ssh-keygen -t rsa -C "邮箱地址"：                生成私钥
        - -t：生成 rsa 类型（rsa：非对称加密方式）

分支重命名：
    1.先重命名本地分支

    2.删除远程分支

    3.从现有来源创建新的分支

使用步骤：
    （1）git init：              初始化本地 本地仓库（在项目目录下新建一个 本地仓库，也就是 .git 目录，该目录默认是隐藏的）

    （2）git status：            查看文件状态（查看 Git 管理中的文件状态）（红色：不被管理的文件）（绿色：被管理的文件）
        提示信息：
            No commits yet（当前仓库中还没有任何提交）
            Untracked files（以下文件没有被 Git 管理）
            nothing to commit, working tree clean（在工作目录和暂存区中没有要提交的文件）
            modified（这个文件被修改过了）

    （3）git add 文件名：         将文件添加到暂存区中（该文件的状态变为 被管理的文件）
        - git add.：            将所有文件添加到暂存区中

    （4）git commit -m 提交说明： 将暂存区的文件提交到 本地仓库中
        提示信息：
            1 file changed, 1 insertion(+)：有 1 个文件发送了变化，在这个文件中插入了 1 行内容

    （5）git remote add origin 远程仓库地址（HTTPS/SSH）：关联远程仓库

    （7）git checkout -b 分支名称：创建分支，并切换到这个分支中

    （8）git push -u origin 分支名称：将本地分支推送到远程仓库的 origin 分支中

    （8）将其它分支合并到 master 分支中：
        git checkout master
        git merge 其它分支

    （9）git push：将本地仓库推送到远程仓库中

    git log：               查看提交历史记录
        提示信息：
            commit：这次项目提交的 ID
            Author：这次项目提交的 作者、邮箱
            Date：  这次项目提交的 事件

合并冲突（解决冲突的方式）：
    概念：当拉取或推送文件时，如果其他人和你修改了同一个地方，就会产生 合并冲突

    提示：不要使用 VSCode 源代码管理进行以下操作，否则会报错，直接使用命令来完成

    解决方式：
    1、选择留下谁的代码
    2、保存文件
    3、git add 冲突的文件。将冲突的文件标记为已解决
    4、git commit -m 提交说明
    5、git push

git 回退操作
  （一）撤销工作区中的文件
  撤销所有文件：`git checkout .`
  撤销单个文件：`git checkout -- 撤销的文件名`

  （二）撤销暂存区中的文件到工作区中
  撤销所有文件：`git reset`
  撤销单个文件：`git reset -- 撤销的文件名`

  （三）回滚，也就是将远程仓库撤销到指定版本中
  1、回滚到指定版本：git reset --hard 推送ID
  2、强制推送到远程仓库：git push -f

撤销操作：
    使用场景：在项目功能开发到一半的时候，将工作目录中已修改的文件添加到暂存区中，回到工作目录中继续开发，在开发的过程中发现代码有问题，需要将功能恢复到开发一半时的状态
    原理：将暂存区中的文件覆盖工作目录中的文件

    命令：git checkout 要恢复的文件

    特性：恢复暂存区中的文件时，该文件依然还在暂存区中

从暂存区中删除文件：
    使用场景：工作目录下有一些测试文件，这些测试文件不需要 Git 管理，因为这些只是临时文件，用完就删除了，但有时候不小心添加到了暂存区中，这时候就要将这些文件从暂存区中删除

    命令： git rm --cached 要删除的文件

恢复 Git 中的项目状态（回滚）：
    特性：
    1、在 本地仓库中分别有 A B C D 的项目状态，这次要恢复到 B 状态，Git 内部会自动将 C D 状态给删除
    2、本地仓库中对应版本的文件会覆盖工作目录中的文件和暂存区中的文件

    使用步骤：
    1、回滚到指定版本：git reset --hard 项目提交ID
    2、强制推送到远程仓库：git push -f

分支
    概念：可以理解为副本，相当于将工作目录复制了一份
    作用：
        1、同时在不同的代码副本上做不同的事情。如：在一个分支上开发新功能，在另一个分支上修复其它功能的 BUG，这样的好处是可以在不同的环境中做不同的事情，互不影响
        2、从开发主线中分离出来，相对独立，互不影响
    特性：将当前工作目录切换到分支中

    主分支（master）：第一个向 本地仓库提交项目状态时，自动产生的一个分支

    开发分支（develop）：基于主分支创建的分支
        作用：主分支中的代码一般都是向外界提供的代码，所以开发工作一般都不会在主分支上进行，而是在开发分支中进行，当开发分支开发结束后，在将开发分支的代码合并到主分支上

    功能分支（feature）：开发具体功能的分支，基于开发分支创建的分支
        作用：当功能开发完成后，再将功能分支中的代码合并到开发分支，这时功能分支就可以输出了

    提示：除功能分支外，修复 BUG、不同版本的开发（如 jquery1 jquery2 jquery3）也可以创建单独的分支

    命令：
        git branch：               查看分支
            * 代表当前所在分支
            命令行中的工作目录最后面的蓝色小括号里显示的也是 当前所在分支

        git branch 分支名称：       创建分支（当前所在分支创建分支）
            例：git branch develop（创建开发分支）

        git checkout -b 分支名称：  创建分支，并切换到这个分支中

        git checkout 分支名称：     切换分支
            例：git checkout develop（切换开发分支）
            注意：再切换分支前，当前分支上的工作一定要提交到 本地仓库中，暂存区中必须是空的，否则暂存区中的文件会移动到切换后的分支中

        git merge 被合并的分支：     合并分支（将其它分支合并到当前分支中）
            特性： 
                1、切换到合并后的开发分支上，在进行合并分支
                2、合并后被合并的分支依然存在，还可以继续在被合并的分支中继续开发
            提示信息：1 file changed, 0 insertion(+), 0 deletions(-)：有 1 个文件发送了变化，在这个文件中插入了 0 行内容, 删除了 0 行代码
            例：将 开发分支 合并到 主分支 中
                git checkout master
                git merge develop
            演示：将 master 合并到 demo-1 中（合并分支）（使用 VSCode 操作）
                - 切换到 demo-1 分支中
                - command + shift + p
                - 选择 合并分支
                - 选择 master

        git branch -d 分支名称：    删除分支（分支被合并后才允许删除）（-D 强制删除）

        

暂存 临时改动功能：
    作用：将当前分支上的所有改动保存起来，并提供一个干净的工作副本（不存在任何改动的工作目录），也就可以随意的切换分支了，当需要再次开发之前的分支时，只需要恢复即可
    使用场景：正在开发一个新功能，领导告诉你之前开发的功能有个 BUG，需要你马上修复，但是当前分支上的新功能还没有开发完成，你不想提交，就可以使用暂存 临时改动功能

    注意：在其它分支中 恢复临时改时，会将 临时改动 恢复到其它分支中，所以在 恢复临时改时，要确认当前所在的分支

    存储 临时改动：git stash
    恢复 临时改动：git stash pop

Git 忽略清单：
    作用：告诉 Git 哪些文件不需要被管理
    使用场景：工作目录的文件较多时，通常会一次性将所有文件添加到暂存区中，所以需要告诉 Git 哪些文件不需要被管理，这样一次性将所有文件添加到暂存区中时，这些文件就不会被管理了。 如：node_modules、测试代码文件 都不想被 Git 管理

    使用步骤：
        1、在项目根目录新建 .gitignore 文件
        2、将不想被 Git 管理的文件 或 文件夹 写在这个忽略清单中
            如：
                node_modules
                test.html
                ...
        3、把工作目录中的所有文件添加到暂存区中
            命令：git add .

特性：无法提交空的文件夹，如果需要提交空目录，需要在空目录中创建 .gitkeep，当以后这个空目录有文件时，在删除 .gitkeep


使用步骤演示：  
慕课网git：https://git.imooc.com     

    - 关掉记住账号密码
        git config --global credential.helper ""

    - 配置密钥
        - 如果已有秘钥，只需要将已有的 id_rsa.pub 文件，将里面的代码复制远程仓库的密钥中即可
        
        - 生成秘钥：ssh-keygen -t rsa -C "1160206165@qq.com"，命令行会提示输入信息，全部回车默认
        - 打开提示的密钥目录
        - 打开 id_rsa.pub 文件，将里面的代码复制远程仓库的密钥中

    - 在慕课网 git 中创建仓库
        - 启用 README.md 文件初始化仓库
        - 其它选项都默认

    - 克隆远程仓库到本地仓库
        git clone 远程仓库地址（HHS）
        命令行提示：是否确实要继续连接，输入 yes

    - 提交代码到远程仓库（使用 VSCode 操作）
        - 修改代码
        - 在源代码管理中添加到 暂存区 中
        - 填写日志
        - 提交
        - 推送到远程仓库中
        - 输入远程仓库的账号密码（只有第一次推送才需要输入账号密码）
    
    - 将 master 合并到 demo-1 中（合并分支）（使用 VSCode 操作）
        - 切换到 demo-1 分支中
        - command + shift + p
        - 选择 合并分支
        - 选择 master（自动提交）

VSCode 操作 git 要比使用命令操作更加的高效、方便
    配置 VSCode 工具（--settings.json）：
        "git.autofetch": true,
        // 提示：如果要切换 git 版本，请修改 git 存放目录
        "git.path": git 存放目录,        如："git.path": "/usr/bin/git",

    安装 Git History Diff 插件
        作用：查看 历史记录、日志、Diff 对比、等

    特性：文件推送发生冲突时，重新打开冲突的文件就会提示冲突的地方，选择方案后，会自动提交

    使用技巧：
        问题：让删除掉的分支不显示在分支列表中
        解决方法：从新克隆一遍项目

    使用方法：
        （1）在 git 中创建仓库

        （2）添加远程仓库

        （3）推送本地仓库。将本地仓库推送到远程仓库的流程：将要提交的文件放到暂存区 → 提交暂存区中的文件，并输入提交信息 → 推送到远程仓库

        （4）创建分支。每实现一个功能就创建一个分支

        （5）合并分支。功能实现完后再合并分支

        （6）暂存区。实现一些复杂的逻辑时，可以先将代码放到暂存区，如果代码有问题，可以很方便的恢复到之前的代码

        （7）文件冲突。多人修改同一个地方导致代码冲突的问题，打开冲突文件，选择保留？？？