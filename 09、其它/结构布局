知识点：结构布局

开发流程：结构 → 渲染数据 → 样式 → 行为

元素 平均分配剩余空间：
  特性：父元素必须要有 宽 或 高
  为父元素添加：display: flex
  为每个子元素添加 flex: 1

让单个子元素靠右显示

  方法一：（搞不懂，有时候有效，有时候没效）
    使用场景：有三个元素时，只适用于中间的元素
    特性：只能给一个元素适用，其他元素适用该方法时，无效
    适用步骤：
      flex: 1;（当其他子元素加 flex 时，则需要加 flex，否则不加）
      text-align: right;

  方法二：
    使用场景：只适用于最后的元素
    特性：
    1、只能给一个元素适用，其他元素适用该方法时，无效
    2、元素要是 display: block 类型或 display: flex
    适用步骤：
      margin-left: auto;
    注意：有时候需要配合 display: flex 使用

注意：flex:1（要设置宽度，flex: 1 才会生效，宽度随便设置，有宽度就可以）

推荐常用布局：flex（弹性布局）、position（定位）、transform（转换）。其它布局基本都有缺点

让单个盒子移动，且不会改变原先的位置
特性：对 行内元素 无效

行间距
  letter-spacing: 10px;

注意：
  - 少用 line-height 因为会影响子元素，布局时，能用 弹性布局就用，不要嫌麻烦
  - 尽量少用 &:hover，用原生的 元素:hover 更好，因为 &:hover 有些场景会有问题
  - 为 a、ul、div 标签添加样式时，尽量用子选择器，如： > a {weight: 100px}
  - 为 footer 等通过类名添加样式时，尽量用子选择器
  - class 要放在标签属性的最后面
  - 会改变的文本要设置多余宽度，这样即使数据文本过长也不会影响美观
  - 使用子组件时不要放在父组件的深层，放在template元素的孙子元素中里即可，因为放在深层容易被其它父组件的样式影响
  - 路由跳转，哈希值跳转尽量用 a 标签，少用 $router.push()，这样可以少些一个方法，减少代码量。a 标签适合单纯的路由跳转；$router.push() 适合复杂的路由跳转

简写：
  过渡：ttion

如果 ul li a img 标签内还有相同的标签，就要为外层的标签起类名，防止样式冲突

a 高度不要设置 100%，直接设置行高

结构问题：
  给子元素添加了 flex，但并没有按照父元素来平均分配
    解决方法：给 img 设置 width: 100%

技巧
  两个子元素分别靠两边对齐时，用父盒子包裹，然后使用弹性布局

雷区

  尽量少用 opacity
    问题：opacity 会导致所有子元素透明度发送变化
    解决方法：使用 background-color: #55585a7a（该值在控制台获取）或 rgba(0, 0, 0, .4);
    
  
代码规范
  变量名、数据名、方法名、父组件文件名（小驼峰）
  子组件文件名（大驼峰）